0 info it worked if it ends with ok
1 verbose cli [ 'C:\\Program Files\\nodejs\\node.exe',
1 verbose cli   'C:\\Program Files\\nodejs\\node_modules\\npm\\bin\\npm-cli.js',
1 verbose cli   'publish' ]
2 info using npm@3.7.3
3 info using node@v5.9.0
4 verbose publish [ '.' ]
5 silly cache add args [ '.', null ]
6 verbose cache add spec .
7 silly cache add parsed spec Result {
7 silly cache add   raw: '.',
7 silly cache add   scope: null,
7 silly cache add   name: null,
7 silly cache add   rawSpec: '.',
7 silly cache add   spec: 'F:\\projects\\zander',
7 silly cache add   type: 'directory' }
8 verbose addLocalDirectory C:\Users\ganpati\AppData\Roaming\npm-cache\zander\0.0.1\package.tgz not in flight; packing
9 verbose correctMkdir C:\Users\ganpati\AppData\Roaming\npm-cache correctMkdir not in flight; initializing
10 info lifecycle zander@0.0.1~prepublish: zander@0.0.1
11 silly lifecycle zander@0.0.1~prepublish: no script for prepublish, continuing
12 verbose tar pack [ 'C:\\Users\\ganpati\\AppData\\Roaming\\npm-cache\\zander\\0.0.1\\package.tgz',
12 verbose tar pack   'F:\\projects\\zander' ]
13 verbose tarball C:\Users\ganpati\AppData\Roaming\npm-cache\zander\0.0.1\package.tgz
14 verbose folder F:\projects\zander
15 verbose addLocalTarball adding from inside cache C:\Users\ganpati\AppData\Roaming\npm-cache\zander\0.0.1\package.tgz
16 verbose correctMkdir C:\Users\ganpati\AppData\Roaming\npm-cache correctMkdir not in flight; initializing
17 silly cache afterAdd zander@0.0.1
18 verbose afterAdd C:\Users\ganpati\AppData\Roaming\npm-cache\zander\0.0.1\package\package.json not in flight; writing
19 verbose correctMkdir C:\Users\ganpati\AppData\Roaming\npm-cache correctMkdir not in flight; initializing
20 verbose afterAdd C:\Users\ganpati\AppData\Roaming\npm-cache\zander\0.0.1\package\package.json written
21 silly publish { name: 'zander',
21 silly publish   version: '0.0.1',
21 silly publish   private: true,
21 silly publish   description: 'Node.JS dependency injection framework',
21 silly publish   keywords: [ 'Dependency injection', 'Node.JS' ],
21 silly publish   author: { name: 'Yogesh C. Jadhav' },
21 silly publish   homepage: 'https://github.com/carbonrider/zander',
21 silly publish   license: 'MIT',
21 silly publish   main: 'examples/simple/index.js',
21 silly publish   dependencies: { bluebird: '^3.3.5', glob: '^7.0.3' },
21 silly publish   devDependencies:
21 silly publish    { del: '^2.2.0',
21 silly publish      gulp: '^3.9.1',
21 silly publish      'gulp-sourcemaps': '^1.6.0',
21 silly publish      'gulp-typescript': '^2.13.3',
21 silly publish      'jasmine-core': '^2.4.1',
21 silly publish      'jasmine-node': '^1.14.5',
21 silly publish      'run-sequence': '^1.1.5',
21 silly publish      should: '^7.1.0',
21 silly publish      supertest: '^1.0.0',
21 silly publish      typescript: '^1.8.10' },
21 silly publish   scripts: { start: 'node examples/simple/index.js' },
21 silly publish   repository:
21 silly publish    { type: 'git',
21 silly publish      url: 'git+https://github.com/carbonrider/zander.git' },
21 silly publish   maintainers:
21 silly publish    [ { name: 'Yogesh C. Jadhav',
21 silly publish        email: 'yogesh.jadhav@gmail.com',
21 silly publish        url: 'http://www.carbonrider.com' } ],
21 silly publish   readme: '# Zander\r\n\r\nA configurable dependency injection for Node.JS without a need to patch `require` or manually injecting references.\r\nSimple, easy to get started and bundled with examples to bootstrap your project.\r\n\r\n## Usage\r\nInstall zander using your favorite package manager : npm\r\n\r\n```\r\nnpm install zander --save\r\n```\r\n\r\nOnce you have configured zander in your project, here is the next step.\r\n\r\n### Javascript\r\n\r\n```javascript\r\n"use strict";\r\nvar zander = require(\'zander\');\r\nvar config_loader = require(\'zander/config/config-loader\');\r\nvar path = require(\'path\');\r\nvar configLoader = new config_loader.SimpleFilePathMatchLoader(["modules_dir/module.json"]);\r\nvar depManager = zander.default({ configLoader: configLoader, modulePath: path.join(__dirname, \'modules\') });\r\ndepManager.configure();\r\n```\r\n\r\nNote that the `configure` function returns `Promise` which can be used to get references of beans or perform any activity\r\nwhich requires all the beans are in ready state. The examples could include start listing on 8080 port after all services\r\nare ready. Refer to following code block for details\r\n\r\n```javascript\r\ndepManager.configure().then(function (configured) {\r\n    console.log("All beans are initialized and injected.");\r\n    var customerBean = depManager.getBean("customer");\r\n    customerBean.greet();\r\n});\r\n```\r\n\r\n## Multiple beans under one folder\r\nIn case, if you have multiple beans under one folder due to the grouping requirements your project has, Zander offers `path`\r\nattribute for bean declaration. Refer to multi-bean example for more details.\r\n\r\n## Module configuration\r\n\r\nZander supports both simple path matching and glob style path matching support for loading configuration files.\r\nJust replace `SimpleFilePathMatchLoader` with `WildcardFilePathConfigLoader` and you can specify wildcard path.\r\n\r\n## Split configuration\r\n\r\nZander supports splitting configuration of beans across multiple files and its programmed to identify dependencies\r\nin correct order. As a developer you are free to split configuration as per logical groups of beans. For e.g. all\r\nservice beans in one file, while all business logic and data access bean definitions in another file.\r\n\r\n## Zander in action\r\n\r\nZander doesn\'t require to inherit nor make any references to the core framework in your beans. The current implementation\r\nsupports injecting dependencies using constructors.\r\n',
21 silly publish   readmeFilename: 'README.md',
21 silly publish   gitHead: 'c16e7c4e7313d9c39f5b14aab2062c834ed23508',
21 silly publish   bugs: { url: 'https://github.com/carbonrider/zander/issues' },
21 silly publish   _id: 'zander@0.0.1',
21 silly publish   _shasum: 'c17816bb489edadc39e382a85f4db8324cee2884',
21 silly publish   _from: '.' }
22 verbose getPublishConfig undefined
23 verbose stack Error: This package has been marked as private
23 verbose stack Remove the 'private' field from the package.json to publish it.
23 verbose stack     at publish_ (C:\Program Files\nodejs\node_modules\npm\lib\publish.js:100:15)
23 verbose stack     at Array.<anonymous> (C:\Program Files\nodejs\node_modules\npm\node_modules\slide\lib\bind-actor.js:15:8)
23 verbose stack     at LOOP (C:\Program Files\nodejs\node_modules\npm\node_modules\slide\lib\chain.js:15:14)
23 verbose stack     at LOOP (C:\Program Files\nodejs\node_modules\npm\node_modules\slide\lib\chain.js:14:28)
23 verbose stack     at chain (C:\Program Files\nodejs\node_modules\npm\node_modules\slide\lib\chain.js:20:5)
23 verbose stack     at C:\Program Files\nodejs\node_modules\npm\lib\publish.js:72:5
23 verbose stack     at RES (C:\Program Files\nodejs\node_modules\npm\node_modules\inflight\inflight.js:23:14)
23 verbose stack     at f (C:\Program Files\nodejs\node_modules\npm\node_modules\once\once.js:17:25)
23 verbose stack     at C:\Program Files\nodejs\node_modules\npm\lib\cache.js:362:16
23 verbose stack     at C:\Program Files\nodejs\node_modules\npm\node_modules\write-file-atomic\index.js:29:9
24 verbose cwd F:\projects\zander
25 error Windows_NT 6.1.7601
26 error argv "C:\\Program Files\\nodejs\\node.exe" "C:\\Program Files\\nodejs\\node_modules\\npm\\bin\\npm-cli.js" "publish"
27 error node v5.9.0
28 error npm  v3.7.3
29 error This package has been marked as private
29 error Remove the 'private' field from the package.json to publish it.
30 error If you need help, you may report this error at:
30 error     <https://github.com/npm/npm/issues>
31 verbose exit [ 1, true ]
